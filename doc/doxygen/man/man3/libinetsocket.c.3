.TH "C/libinetsocket.c" 3 "Sat Mar 2 2013" "libsocket" \" -*- nroff -*-
.ad l
.nh
.SH NAME
C/libinetsocket.c \- 
.SH SYNOPSIS
.br
.PP
\fC#include <stdlib\&.h>\fP
.br
\fC#include <stdio\&.h>\fP
.br
\fC#include <sys/socket\&.h>\fP
.br
\fC#include <sys/types\&.h>\fP
.br
\fC#include <unistd\&.h>\fP
.br
\fC#include <stdint\&.h>\fP
.br
\fC#include <netdb\&.h>\fP
.br
\fC#include <string\&.h>\fP
.br
\fC#include <errno\&.h>\fP
.br
\fC#include <netinet/in\&.h>\fP
.br

.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fB_GNU_SOURCE\fP"
.br
.ti -1c
.RI "#define \fBLIBSOCKET_BACKLOG\fP   128"
.br
.ti -1c
.RI "#define \fBLIBSOCKET_CLIENT_NAME_BUF\fP   1024"
.br
.ti -1c
.RI "#define \fBLIBSOCKET_TCP\fP   1"
.br
.ti -1c
.RI "#define \fBLIBSOCKET_UDP\fP   2"
.br
.ti -1c
.RI "#define \fBLIBSOCKET_IPv4\fP   3"
.br
.ti -1c
.RI "#define \fBLIBSOCKET_IPv6\fP   4"
.br
.ti -1c
.RI "#define \fBLIBSOCKET_BOTH\fP   5"
.br
.ti -1c
.RI "#define \fBLIBSOCKET_READ\fP   1"
.br
.ti -1c
.RI "#define \fBLIBSOCKET_WRITE\fP   2"
.br
.ti -1c
.RI "#define \fBLIBSOCKET_NUMERIC\fP   1"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "int \fBcreate_inet_stream_socket\fP (const char *host, const char *service, char proto_osi3, int flags)"
.br
.RI "\fICreate and connect a new TCP/IP socket\&. \fP"
.ti -1c
.RI "int \fBcreate_inet_dgram_socket\fP (char proto_osi3, int flags)"
.br
.RI "\fICreates a new UDP/IP socket\&. \fP"
.ti -1c
.RI "ssize_t \fBsendto_inet_dgram_socket\fP (int sfd, const void *buf, size_t size, const char *host, const char *service, int sendto_flags)"
.br
.RI "\fIThis function is the equivalent to \fCsendto(2)\fP \fP"
.ti -1c
.RI "ssize_t \fBrecvfrom_inet_dgram_socket\fP (int sfd, void *buffer, size_t size, char *src_host, size_t src_host_len, char *src_service, size_t src_service_len, int recvfrom_flags, int numeric)"
.br
.ti -1c
.RI "int \fBconnect_inet_dgram_socket\fP (int sfd, const char *host, const char *service)"
.br
.ti -1c
.RI "int \fBdestroy_inet_socket\fP (int sfd)"
.br
.ti -1c
.RI "int \fBshutdown_inet_stream_socket\fP (int sfd, int method)"
.br
.ti -1c
.RI "int \fBcreate_inet_server_socket\fP (const char *bind_addr, const char *bind_port, char proto_osi4, char proto_osi3, int flags)"
.br
.ti -1c
.RI "int \fBaccept_inet_stream_socket\fP (int sfd, char *src_host, size_t src_host_len, char *src_service, size_t src_service_len, int flags, int accept_flags)"
.br
.ti -1c
.RI "int \fBget_address_family\fP (const char *hostname)"
.br
.in -1c
.SH "Detailed Description"
.PP 
Contains all C libinetsocket functions\&. 
.SH "Function Documentation"
.PP 
.SS "int create_inet_dgram_socket (charproto_osi3, intflags)"

.PP
Creates a new UDP/IP socket\&. Returns an integer describing a DGRAM (UDP) socket\&.
.PP
\fBParameters:\fP
.RS 4
\fIproto_osi3\fP is LIBSOCKET_IPv4 (AF_INET) or LIBSOCKET_IPv6 (AF_INET6)\&. 
.br
\fIflags\fP may be the flags specified in socket(2), i\&.e\&. SOCK_NONBLOCK and/or SOCK_CLOEXEC\&. More than one flags may be ORed\&. This argument is only sensible on Linux >= 2\&.6\&.27!
.RE
.PP
\fBReturns:\fP
.RS 4
The socket file descriptor number, on error -1\&.
.RE
.PP
To send and receive data with this socket use the functions explained below, \fBsendto_inet_dgram_socket()\fP and recvfrom_inet_dgram_socket()\&. 
.SS "int create_inet_stream_socket (const char *host, const char *service, charproto_osi3, intflags)"

.PP
Create and connect a new TCP/IP socket\&. \fBParameters:\fP
.RS 4
\fIhost\fP The host the socket will be connected to (everything resolvable, e\&.g\&. '::1', '8\&.8\&.8\&.8', 'example\&.com') 
.br
\fIservice\fP The host's port, either numeric or as service name ('http')\&. 
.br
\fIproto_osi3\fP \fCLIBSOCKET_IPv4\fP or \fCLIBSOCKET_IPv6\fP\&. 
.br
\fIflags\fP Flags to be passed to \fCsocket(2)\fP
.RE
.PP
\fBReturns:\fP
.RS 4
A valid socket file descriptor\&. 
.RE
.PP

.SS "ssize_t sendto_inet_dgram_socket (intsfd, const void *buf, size_tsize, const char *host, const char *service, intsendto_flags)"

.PP
This function is the equivalent to \fCsendto(2)\fP \fBParameters:\fP
.RS 4
\fIsfd\fP is the \fISocket File Descriptor\fP (every socket file descriptor argument in libsocket is called sfd) which you got from \fBcreate_inet_dgram_socket()\fP\&. \fIThe usage with STREAM sockets is not recommended and the result is undefined!\fP 
.br
\fIbuf\fP is a pointer to some data\&. 
.br
\fIsize\fP is the length of the buffer to which buf points\&. 
.br
\fIhost\fP is the host to which we want to send the data\&. It's a string so you may specify everything what's resolved by getaddrinfo(), i\&.e\&. an IP ('193\&.21\&.34\&.21') or a hostname ('example\&.net')\&. 
.br
\fIservice\fP is the port on the remote host\&. Like in host, you may specify the port either as number ('123') or as service string ('ntp', 'http', 'gopher')\&. 
.br
\fIsendto_flags\fP is available on all platforms\&. The value given here goes directly to the internal sendto() call\&. The flags which may be specified differ between the platforms\&.
.RE
.PP
If it is not possible to send data at the moment, this call blocks excepted you specified SOCK_NONBLOCK when creating the socket\&. 
.SH "Author"
.PP 
Generated automatically by Doxygen for libsocket from the source code\&.
