#DYNAMIC LINKAGE

 *** RECOMMENDED ***

First, build and install the libraries using `make install` in the source tree root.
You also may distribute the binary libraries with your program (the license allows this) and install them to
the library directory (e.g. /usr/lib).

Then, compile your programs using the -lsocket (for C libsocket) respectively -lsocket++
(for C++ libsocket) switch. libsocket++ contains also all libsocket functions, so you may link
your C application against libsocket++, if you want to install only one library.

Some more information can be found in README.md.

#STATIC LINKAGE

*C*

If you're using the C interface, you only have to link with C/libinetsocket.c respectively
C/libunixsocket.c.

*C++*

This file can be used to determine which files must be specified on the compiler's command line
to enable correct linkage. It's a great help because libsocket++ uses very much classes (more than
15) and for every class an own file. You may practice this using the files in examples++/.

Note: To understand the dependencies between the files, take a look at doc/libsocket++/classes.svg
The descriptions of the classes are placed under the license at the beginning of every C++ source file.

Legend:
file.type (implemented class)
file.type [commentary]

All files ending with .cpp are located in C++/, all files ending with .c may be found in C/.

** SPECIAL CASES **

If you program makes use of the selectset class, it must be linked against select.cpp.

** GENERAL SCHEMES **
Of course, some schemes may be combined, e.g. if you have a program acting as both UDP server and client.

For...
* TCP Internet Server Programs:
	- libinetsocket.c [socket functionality]
	- socket.cpp (socket)
	- exception.cpp (socket_exception)
	- inetbase.cpp (inet_socket)
	- inetserverstream.cpp (inet_stream_server)
	- streamclient.cpp (stream_client_socket)
	- inetclientstream.cpp (inet_stream) // inet_stream_server::accept() returns an inet_stream object

* TCP Internet Client Programs:
	- libinetsocket.c [socket functionality]
	- socket.cpp (socket)
	- exception.cpp (socket_exception)
	- inetbase.cpp (inet_socket)
	- streamclient.cpp (stream_client_socket)
	- inetclientstream.cpp (inet_stream)

* UDP Internet Server Programs:
	- libinetsocket.c [socket functionality]
	- socket.cpp (socket)
	- exception.cpp (socket_exception)
	- inetbase.cpp (inet_socket)
	- inetdgram.cpp (inet_dgram)
	- inetserverdgram.cpp (inet_dgram_client)

* UDP Internet Client Programs:
	- libinetsocket.c [socket functionality]
	- socket.cpp (socket)
	- exception.cpp (socket_exception)
	- inetbase.cpp (inet_socket)
	- inetdgram.cpp (inet_dgram)
	- clientdgram.cpp (dgram_client_socket)
	- inetclientdgram.cpp (inet_dgram_client)

==================================================================================================

* UNIX Stream Client Programs:
	- libunixsocket.c [socket functionality]
	- socket.cpp (socket)
	- exception.cpp (socket_exception)
	- unixbase.cpp (unix_socket)
	- clientstream.cpp (stream_client_socket)
	- unixclientstream.cpp (unix_stream_client)

* UNIX Stream Server Programs:
	- libunixsocket.c [socket functionality]
	- socket.cpp (socket)
	- exception.cpp (socket_exception)
	- clientstream.cpp (stream_client_socket)
	- unixbase.cpp (unix_socket)
	- unixclientstream.cpp (unix_stream_client)
	- unixserverstream.cpp

* UNIX Dgram Client Programs:
	- libunixsocket.c [socket functionality]
	- socket.cpp (socket)
	- exception.cpp (socket_exception)
	- dgramclient.cpp (dgram_client_socket)
	- unixdgram.cpp (unix_dgram)
	- unixdgramclient.cpp (unix_dgram_client)

* UNIX Dgram Server Programs:
	- libunixsocket.c [socket functionality]
	- socket.cpp (socket)
	- exception.cpp (socket_exception)
	- dgramclient.cpp (dgram_client_socket)
	- unixdgram.cpp (unix_dgram)
	- unixdgramclient.cpp (unix_dgram_client)
	- unixdgramserver.cpp (unix_dgram_server)

